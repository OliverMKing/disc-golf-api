/*
 * Disc Golf API
 *
 * Open-source Disc golf api that follows OpenAPI specification. Source code can be found [here](https://github.com/OliverMKing/disc-golf-api).
 *
 * API version: 0.0.1
 * Contact: olivermerkleyking@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DiscApiController binds http requests to an api service and writes the service results to the http response
type DiscApiController struct {
	service DiscApiServicer
	errorHandler ErrorHandler
}

// DiscApiOption for how the controller is set up.
type DiscApiOption func(*DiscApiController)

// WithDiscApiErrorHandler inject ErrorHandler into controller
func WithDiscApiErrorHandler(h ErrorHandler) DiscApiOption {
	return func(c *DiscApiController) {
		c.errorHandler = h
	}
}

// NewDiscApiController creates a default api controller
func NewDiscApiController(s DiscApiServicer, opts ...DiscApiOption) Router {
	controller := &DiscApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DiscApiController
func (c *DiscApiController) Routes() Routes {
	return Routes{ 
		{
			"GetDiscById",
			strings.ToUpper("Get"),
			"/v1/disc/{discId}",
			c.GetDiscById,
		},
		{
			"ListDisc",
			strings.ToUpper("Get"),
			"/v1/disc",
			c.ListDisc,
		},
	}
}

// GetDiscById - Find disc by ID
func (c *DiscApiController) GetDiscById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	discIdParam, err := parseInt64Parameter(params["discId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetDiscById(r.Context(), discIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListDisc - Get a paginated list of discs
func (c *DiscApiController) ListDisc(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	skipTokenParam, err := parseInt64Parameter(query.Get("skipToken"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	topParam, err := parseInt64Parameter(query.Get("top"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListDisc(r.Context(), skipTokenParam, topParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
