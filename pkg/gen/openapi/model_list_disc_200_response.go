/*
 * Disc Golf API
 *
 * Open-source Disc golf api that follows OpenAPI specification. Source code can be found [here](https://github.com/OliverMKing/disc-golf-api).
 *
 * API version: 0.0.1
 * Contact: olivermerkleyking@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ListDisc200Response struct {

	// The URL a client should use to get the next page
	NextLink string `json:"nextLink,omitempty"`

	Items []Disc `json:"items,omitempty"`
}

// AssertListDisc200ResponseRequired checks if the required fields are not zero-ed
func AssertListDisc200ResponseRequired(obj ListDisc200Response) error {
	for _, el := range obj.Items {
		if err := AssertDiscRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseListDisc200ResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ListDisc200Response (e.g. [][]ListDisc200Response), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseListDisc200ResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aListDisc200Response, ok := obj.(ListDisc200Response)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertListDisc200ResponseRequired(aListDisc200Response)
	})
}
