/*
 * Disc Golf API
 *
 * Open-source Disc golf api that follows OpenAPI specification. Source code can be found [here](https://github.com/OliverMKing/disc-golf-api).
 *
 * API version: 0.0.1
 * Contact: olivermerkleyking@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Disc struct {

	Id int64 `json:"id,omitempty"`

	Name string `json:"name"`

	Distributor string `json:"distributor"`

	// Max weight in grams
	MaxWeight float64 `json:"maxWeight,omitempty"`

	// Diameter in centimeters
	Diameter float64 `json:"diameter,omitempty"`

	// Height in centimeters
	Height float64 `json:"height,omitempty"`

	// Rim depth in centimeters
	RimDepth float64 `json:"rimDepth,omitempty"`

	Speed int64 `json:"speed,omitempty"`

	Glide int64 `json:"glide,omitempty"`

	Turn int64 `json:"turn,omitempty"`

	Fade int64 `json:"fade,omitempty"`

	PrimaryUse string `json:"primaryUse,omitempty"`
}

// AssertDiscRequired checks if the required fields are not zero-ed
func AssertDiscRequired(obj Disc) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"distributor": obj.Distributor,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseDiscRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Disc (e.g. [][]Disc), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseDiscRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDisc, ok := obj.(Disc)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertDiscRequired(aDisc)
	})
}
